// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IConsumer is an autogenerated mock type for the IConsumer type
type IConsumer struct {
	mock.Mock
}

// ConsumeMessage provides a mock function with given fields: ctx, msg
func (_m *IConsumer) ConsumeMessage(ctx context.Context, msg interface{}) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConsumed provides a mock function with given fields: msg
func (_m *IConsumer) IsConsumed(msg interface{}) bool {
	ret := _m.Called(msg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewIConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewIConsumer creates a new instance of IConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIConsumer(t mockConstructorTestingTNewIConsumer) *IConsumer {
	mock := &IConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
