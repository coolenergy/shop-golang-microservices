definitions:
  dtos.CreateProductRequestDto:
    properties:
      count:
        type: integer
      description:
        type: string
      inventoryId:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  dtos.CreateProductResponseDto:
    properties:
      productId:
        type: string
    type: object
  dtos.GetProductByIdResponseDto:
    properties:
      product:
        $ref: '#/definitions/dtos.ProductDto'
    type: object
  dtos.GetProductsResponseDto:
    properties:
      products:
        type: object
    type: object
  dtos.ProductDto:
    properties:
      count:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      inventoryId:
        type: integer
      name:
        type: string
      price:
        type: number
      productId:
        type: string
      updatedAt:
        type: string
    type: object
  dtos.RegisterUserRequestDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      userName:
        type: string
    type: object
  dtos.RegisterUserResponseDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      userId:
        type: string
      userName:
        type: string
    type: object
  dtos.SearchProductsResponseDto:
    properties:
      products:
        type: object
    type: object
  dtos.UpdateProductRequestDto:
    properties:
      count:
        type: integer
      description:
        type: string
      inventoryId:
        type: integer
      name:
        type: string
      price:
        type: number
    required:
    - count
    - inventoryId
    - name
    - price
    type: object
  utils.FilterModel:
    properties:
      comparison:
        type: string
      field:
        type: string
      value:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Get all products
      parameters:
      - in: query
        name: orderBy
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetProductsResponseDto'
      security:
      - ApiKeyAuth: []
      summary: Get all product
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create new product item
      parameters:
      - description: Product data
        in: body
        name: CreateProductRequestDto
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateProductRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.CreateProductResponseDto'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - Products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetProductByIdResponseDto'
      security:
      - ApiKeyAuth: []
      summary: Get product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update existing product
      parameters:
      - description: Product data
        in: body
        name: UpdateProductRequestDto
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateProductRequestDto'
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - Products
  /api/v1/products/search:
    get:
      consumes:
      - application/json
      description: Search products
      parameters:
      - in: query
        name: orderBy
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SearchProductsResponseDto'
      security:
      - ApiKeyAuth: []
      summary: Search products
      tags:
      - Products
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: User data
        in: body
        name: RegisterUserRequestDto
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterUserRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.RegisterUserResponseDto'
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
